from ai.predictor import EuroMillionsPredictor
from services.history_manager import HistoryManager
import numpy as np
import logging

# Configuration des logs
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def main():
    try:
        # Initialisation
        logger.info("‚öôÔ∏è Initialisation du pr√©dicteur...")
        predictor = EuroMillionsPredictor()

        # Nettoyage des donn√©es
        logger.info("üßπ Nettoyage de l'historique...")
        cleaned_history = HistoryManager.clean_history()
        logger.info(f"Historique nettoy√© - {len(cleaned_history)} entr√©es valides")

        # V√©rification des donn√©es
        training_data = HistoryManager.get_training_data()
        logger.info(f"Donn√©es d'entra√Ænement disponibles: {len(training_data)} tirages")
        
        if len(training_data) < 10:
            logger.warning("Attention: Moins de 10 tirages valides disponibles")

        # R√©-entra√Ænement
        logger.info("üîÑ Lancement du r√©-entra√Ænement...")
        success = predictor.retrain_model()
        
        if success:
            logger.info("‚úÖ R√©-entra√Ænement termin√© avec succ√®s!")
            
            # Test de pr√©diction
            try:
                prediction = predictor.predict_next()
                logger.info(f"üîÆ Pr√©diction test - Boules: {prediction['boules']} | √âtoiles: {prediction['etoiles']}")
            except Exception as e:
                logger.error(f"‚ùå Erreur lors du test de pr√©diction: {str(e)}")
        else:
            logger.error("‚ùå √âchec du r√©-entra√Ænement")

    except Exception as e:
        logger.error(f"üí• Erreur critique: {str(e)}")
        return False
    
    return True

if __name__ == "__main__":
    main()